"use strict";(self.webpackChunkdocs_rn_template_by_nh=self.webpackChunkdocs_rn_template_by_nh||[]).push([[801],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),f=l(n),d=o,h=f["".concat(i,".").concat(d)]||f[d]||p[d]||a;return n?r.createElement(h,s(s({ref:t},u),{},{components:n})):r.createElement(h,s({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=f;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<a;l++)s[l]=n[l];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},7078:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>s,default:()=>p,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={sidebar_position:1},s="Project structure",c={unversionedId:"features/project-structure",id:"features/project-structure",title:"Project structure",description:"Our project structure focuses on separating concerns where each folder and sub-folder contain files with a specific role.",source:"@site/docs/features/project-structure.md",sourceDirName:"features",slug:"/features/project-structure",permalink:"/react-native-template-by-nh/docs/features/project-structure",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/features/project-structure.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"RN template by NH features",permalink:"/react-native-template-by-nh/docs/category/rn-template-by-nh-features"},next:{title:"Git hooks",permalink:"/react-native-template-by-nh/docs/features/githooks"}},i={},l=[],u={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"project-structure"},"Project structure"),(0,o.kt)("p",null,"Our project structure focuses on separating concerns where each folder and sub-folder contain files with a specific role."),(0,o.kt)("p",null,"The following schema explains the role of each folder and what it contain:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sh"},"src\n|\n|\u2500\u2500 __mock__ => This folder contains files related to mock tests.\n|\n|\u2500\u2500 .husky => This folder contains all githooks we want to run with the help of husky.\n|\n|\u2500\u2500 config  => In this folder, we include the configuration that our app needs,\n|              such as jest setup and env setup.\n|\n|\u2500\u2500 constants => In this folder, we put all constants that we need inside\n|                our application, like react-query-keys and accessibilityIds.\n|\n|\u2500\u2500 hooks     => In this folder, we put all hooks we may be using globally\n|    |           inside our application, for example, useIsNetworkEnabled, useApiHeaders... etc.\n|    |\n|    \u251c\u2500\u2500 api  => In this folder, we put all hooks of our API calls.\n|    \u2514\u2500\u2500 ..other hooks\n|\n|\u2500\u2500 lib  => In this folder, we put the integration of other services, such as sentry,\n|           google analytics... etc\n|\n|\u2500\u2500 navigation => This folder includes all kinds of navigation, such as\n|                 drawer navigation, tab navigation, and stack navigation.\n|\n|\u2500\u2500 screens\n|      \u2514\u2500\u2500 screen1  => each screen contains multiple folders that contains specifically\n|             |       the elements that belong to it.\n|             |\n|             \u251c\u2500\u2500 components\n|             \u251c\u2500\u2500 __tests__\n|             \u251c\u2500\u2500 hooks\n|             \u2514\u2500\u2500 index.tsx\n|\n|\u2500\u2500 scripts => In this folder, we put all scripts that we need to run, for example,\n|               We have a script that automatically creates a new screen, `gen-screen.ts`\n|\n|\u2500\u2500 store  => In this folder, we put all reducers that we need to use for redux.\n|\n|\u2500\u2500 translation => In this folder, we put all files related to translation.\n|\n|\u2500\u2500 types => This folder contains all types that we want to declare.\n|\n\u2514\u2500\u2500 ui\n    \u251c\u2500\u2500 components => Here we put all common components that are used across the application\n    \u251c\u2500\u2500 fonts => Fonts for our application\n    \u251c\u2500\u2500 icons => Here we put all icons\n    \u2514\u2500\u2500 theme => Here we define our theme\n\n")))}p.isMDXComponent=!0}}]);